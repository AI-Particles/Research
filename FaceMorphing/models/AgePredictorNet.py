from contextlib import nullcontext

import torch
import torch.nn as nn
import torch.nn.functional as F

import dlib_routines_port as dp


class AgePredictorNet(nn.Module):
    def __init__(self, no_grad_mode=True):
        super(AgePredictorNet, self).__init__()

        self.no_grad_mode = no_grad_mode

        self.input_rgb_image53 = dp.InputRgbImage()

        self.con52 = torch.nn.Conv2d(in_channels=3, out_channels=64, kernel_size=(7, 7), stride=(2, 2), padding=(0, 0), bias=True)
        self.affine_con51 = torch.nn.BatchNorm2d(num_features=64)
        self.relu50 = nn.ReLU()
        self.max_pool49 = torch.nn.MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(0, 0))
        self.con47 = torch.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con46 = torch.nn.BatchNorm2d(num_features=64)
        self.relu45 = nn.ReLU()
        self.con44 = torch.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con43 = torch.nn.BatchNorm2d(num_features=64)
        self.add_prev42 = dp.AddPrev()
        self.relu41 = nn.ReLU()
        self.con39 = torch.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), stride=(2, 2), padding=(0, 0), bias=True)
        self.affine_con38 = torch.nn.BatchNorm2d(num_features=128)
        self.relu37 = nn.ReLU()
        self.con36 = torch.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con35 = torch.nn.BatchNorm2d(num_features=128)
        self.avg_pool32 = torch.nn.AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0))
        self.add_prev31 = dp.AddPrev()
        self.relu30 = nn.ReLU()
        self.con28 = torch.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con27 = torch.nn.BatchNorm2d(num_features=128)
        self.relu26 = nn.ReLU()
        self.con25 = torch.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con24 = torch.nn.BatchNorm2d(num_features=128)
        self.add_prev23 = dp.AddPrev()
        self.relu22 = nn.ReLU()
        self.con20 = torch.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(3, 3), stride=(2, 2), padding=(0, 0), bias=True)
        self.affine_con19 = torch.nn.BatchNorm2d(num_features=256)
        self.relu18 = nn.ReLU()
        self.con17 = torch.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con16 = torch.nn.BatchNorm2d(num_features=256)
        self.avg_pool13 = torch.nn.AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=(0, 0))
        self.add_prev12 = dp.AddPrev()
        self.relu11 = nn.ReLU()
        self.con9 = torch.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con8 = torch.nn.BatchNorm2d(num_features=256)
        self.relu7 = nn.ReLU()
        self.con6 = torch.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)
        self.affine_con5 = torch.nn.BatchNorm2d(num_features=256)
        self.add_prev4 = dp.AddPrev()
        self.relu3 = nn.ReLU()
        self.avg_pool2 = torch.nn.AdaptiveAvgPool2d((1, 1))
        self.pre_fc1 = torch.nn.Flatten()
        self.fc1 = torch.nn.Linear(in_features=256, out_features=81, bias=True)
        self.loss_multiclass_log0 = torch.nn.Softmax(dim=-1)

    def forward(self, input):
        with torch.no_grad() if self.no_grad_mode else nullcontext():
            input_rgb_image53_out = self.input_rgb_image53(input)
            con52_out = self.con52(input_rgb_image53_out)
            affine_con51_out = self.affine_con51(con52_out)
            relu50_out = self.relu50(affine_con51_out)
            max_pool49_out = self.max_pool49(relu50_out)
            con47_out = self.con47(max_pool49_out)
            affine_con46_out = self.affine_con46(con47_out)
            relu45_out = self.relu45(affine_con46_out)
            con44_out = self.con44(relu45_out)
            affine_con43_out = self.affine_con43(con44_out)
            add_prev42_out = self.add_prev42(affine_con43_out, max_pool49_out)
            relu41_out = self.relu41(add_prev42_out)
            con39_out = self.con39(relu41_out)
            affine_con38_out = self.affine_con38(con39_out)
            relu37_out = self.relu37(affine_con38_out)
            con36_out = self.con36(relu37_out)
            affine_con35_out = self.affine_con35(con36_out)
            avg_pool32_out = self.avg_pool32(relu41_out)
            padded_avg_pool32_out = F.pad(input=avg_pool32_out, pad=[0, 0, 0, 0, 0, 64, 0, 0], mode='constant', value=0)
            padded_affine_con35_out = F.pad(input=affine_con35_out, pad=[0, 1, 0, 1, 0, 0, 0, 0], mode='constant', value=0)
            add_prev31_out = self.add_prev31(padded_avg_pool32_out, padded_affine_con35_out)
            relu30_out = self.relu30(add_prev31_out)
            con28_out = self.con28(relu30_out)
            affine_con27_out = self.affine_con27(con28_out)
            relu26_out = self.relu26(affine_con27_out)
            con25_out = self.con25(relu26_out)
            affine_con24_out = self.affine_con24(con25_out)
            add_prev23_out = self.add_prev23(affine_con24_out, relu30_out)
            relu22_out = self.relu22(add_prev23_out)
            con20_out = self.con20(relu22_out)
            affine_con19_out = self.affine_con19(con20_out)
            relu18_out = self.relu18(affine_con19_out)
            con17_out = self.con17(relu18_out)
            affine_con16_out = self.affine_con16(con17_out)
            avg_pool13_out = self.avg_pool13(relu22_out)
            padded_avg_pool13_out = F.pad(input=avg_pool13_out, pad=[0, 0, 0, 0, 0, 128, 0, 0], mode='constant', value=0)
            add_prev12_out = self.add_prev12(padded_avg_pool13_out, affine_con16_out)
            relu11_out = self.relu11(add_prev12_out)
            con9_out = self.con9(relu11_out)
            affine_con8_out = self.affine_con8(con9_out)
            relu7_out = self.relu7(affine_con8_out)
            con6_out = self.con6(relu7_out)
            affine_con5_out = self.affine_con5(con6_out)
            add_prev4_out = self.add_prev4(affine_con5_out, relu11_out)
            relu3_out = self.relu3(add_prev4_out)
            avg_pool2_out = self.avg_pool2(relu3_out)
            pre_fc1_out = self.pre_fc1(avg_pool2_out)
            fc1_out = self.fc1(pre_fc1_out)
            loss_multiclass_log0_out = self.loss_multiclass_log0(fc1_out)

            return loss_multiclass_log0_out
